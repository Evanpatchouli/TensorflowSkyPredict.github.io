{"version":3,"sources":["webpack:///./src/views/demo1.vue?ee42","webpack:///./src/views/demo1.vue?b897","webpack:///./src/views/demo1.vue?67ff","webpack:///./src/views/demo1.vue"],"names":["_hoisted_1","class","_hoisted_3","_createElementVNode","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_createCommentVNode","defineComponent","setup","shape","a","tf","console","log","print","b","initialValues","biases","updatedValues","assign","x","Math","sqrt","x2","二元方程求解","input","c","ax2","mul","square","bx","y","add","demo1","result","alert","__exports__"],"mappings":"kHAAA,W,yDCEA,MAAMA,EAAa,CAAEC,MAAO,QAEtBC,EAA0BC,gCAAoB,IAAK,KAAM,sDAAuD,GAMhH,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,gCAAoB,MAAOZ,EAAY,CAGvDa,gCAAoB,IAAI,GAC5BX,EAQIW,gCAAoB,IAAI,K,gBCpBjBC,+BAAgB,CAC7BC,QACE,MAAMC,EAAQ,CAAC,EAAG,GACZC,EAAIC,OAAU,CAAC,EAAK,EAAK,EAAK,GAAM,GAAM,IAAOF,GACvDG,QAAQC,IAAI,OACZH,EAAEI,QAIFF,QAAQC,IAAI,OACZ,MAAME,EAAIJ,OAAU,CAClB,CAAC,EAAK,EAAK,GACX,CAAC,GAAM,GAAM,MAEfI,EAAED,QAEFF,QAAQC,IAAI,cACZF,OAAU,MAAMG,QAChBH,OAAU,KAAM,WAAWG,QAC3BH,OAAU,KAAM,SAASG,QACzBH,OAAU,KAAM,QAAQG,QAGxBF,QAAQC,IAAI,UACZF,OAAY,CAAC,EAAG,EAAG,IAAIG,QAGvBF,QAAQC,IAAI,UAEZF,OAAY,CACV,CAAC,EAAG,GACJ,CAAC,EAAG,KACHG,QAEHH,OAAY,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,IAAIG,QAOlCF,QAAQC,IAAI,UACZF,OAAY,CACV,CAAC,CAAC,GAAI,CAAC,IACP,CAAC,CAAC,GAAI,CAAC,MACNG,QAEHH,OAAY,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAAIG,QAUrCF,QAAQC,IAAI,UACZF,OAAY,CACV,CACE,CAAC,CAAC,GAAI,CAAC,IACP,CAAC,CAAC,GAAI,CAAC,OAERG,QAEHH,OAAY,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IAAIG,QASxCF,QAAQC,IAAI,SACZF,OAAS,CAAC,EAAG,IAAIG,QAMjBF,QAAQC,IAAI,SACZF,OAAQ,CAAC,EAAG,IAAIG,QAKhBF,QAAQC,IAAI,mBACZ,MAAMG,EAAgBL,OAAS,CAAC,IAC1BM,EAASN,OAAYK,GAC3BC,EAAOH,QAEP,MAAMI,EAAgBP,OAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAC/CM,EAAOE,OAAOD,GACdD,EAAOH,QAEPF,QAAQC,IAAI,2BACZ,MAAMO,EAAIT,OAAY,CAAC,EAAG,EAAGU,KAAKC,KAAK,IAAK,IAC5CX,OAAUS,GAAGN,QAGb,MAAMS,EAAKZ,OAAY,CAAC,EAAG,EAAG,GAAI,IAIlC,SAASa,EAAOC,GAEd,OAAOd,OAAQ,KACb,IAAID,EAAIC,OAAU,GACdI,EAAIJ,OAAU,GACde,EAAIf,OAAU,GACdS,EAAIT,OAAUc,GAEdE,EAAMjB,EAAEkB,IAAIR,EAAES,UACdC,EAAKf,EAAEa,IAAIR,GACXW,EAAIJ,EAAIK,IAAIF,GAAIE,IAAIN,GAExB,OAAOK,IAIX,SAASE,IACP,IAAIC,EAASV,EAAO,GACpBW,MAAMD,GAGR,OAxBAvB,OAAQY,GAAIT,QAwBL,CACLJ,IACAK,IACAkB,Y,iCC7HN,MAAMG,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASvC,KAErD,gB","file":"js/chunk-70bfea0d.ab6ecaba.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./demo1.vue?vue&type=style&index=0&id=abc04e14&lang=css\"","import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"main\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \" Tensorflow，当前世界上最流行的深度学习引擎之一，利用神经网络训练以求数据背后的本质奥秘 \", -1)\nconst _hoisted_4 = {\n  key: 1,\n  class: \"case\"\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    false\n      ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, \"DEMO1\"))\n      : _createCommentVNode(\"\", true),\n    _hoisted_3,\n    false\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n          _createElementVNode(\"button\", {\n            id: \"demo1\",\n            onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.demo1()))\n          }, \"二元方程式求解\")\n        ]))\n      : _createCommentVNode(\"\", true)\n  ]))\n}","\nimport { defineComponent } from \"vue\";\nimport * as tf from \"@tensorflow/tfjs\";\nexport default defineComponent({\n  setup() {\n    const shape = [2, 3]; // 可以看做是两行三列组成\n    const a = tf.tensor([1.0, 2.0, 3.0, 10.0, 20.0, 30.0], shape);\n    console.log(\"a↓ \");\n    a.print();\n    // Output: [[1 , 2 , 3 ],\n    //          [10, 20, 30]]\n    // The shape can also be inferred:\n    console.log(\"b↓ \");\n    const b = tf.tensor([\n      [1.0, 2.0, 3.0],\n      [10.0, 20.0, 30.0],\n    ]);\n    b.print();\n\n    console.log(\"0阶张量（标量）↓ \");\n    tf.scalar(3.14).print(); // 3.140000104904175， 默认dtype 是 float32\n    tf.scalar(3.14, \"float32\").print(); // 3.140000104904175\n    tf.scalar(3.14, \"int32\").print(); // 3\n    tf.scalar(3.14, \"bool\").print(); // 1\n\n    // 1阶张量\n    console.log(\"1阶张量↓ \");\n    tf.tensor1d([1, 2, 3]).print(); // [1, 2, 3]\n\n    // 2阶张量\n    console.log(\"2阶张量↓ \");\n    // Pass a nested array.\n    tf.tensor2d([\n      [1, 2],\n      [3, 4],\n    ]).print();\n    // Pass a flat array and specify a shape.\n    tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n    // ouput\n    //    [[1, 2],\n    //   [3, 4]]\n\n    // 3阶张量\n    // Pass a nested array.\n    console.log(\"3阶张量↓ \");\n    tf.tensor3d([\n      [[1], [2]],\n      [[3], [4]],\n    ]).print();\n    // Pass a flat array and specify a shape.\n    tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n    // output\n    //    [[[1],\n    //      [2]],\n\n    //     [[3],\n    //      [4]]]\n\n    // 4阶张量\n    // Pass a nested array.\n    console.log(\"4阶张量↓ \");\n    tf.tensor4d([\n      [\n        [[1], [2]],\n        [[3], [4]],\n      ],\n    ]).print();\n    // Pass a flat array and specify a shape.\n    tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n    // output\n    //    [[[[1],\n    //       [2]],\n\n    //      [[3],\n    //       [4]]]]\n\n    // 3x5 Tensor with all values set to 0\n    console.log(\"零张量↓ \");\n    tf.zeros([3, 5]).print();\n    // Output: [[0, 0, 0, 0, 0],\n    //          [0, 0, 0, 0, 0],\n    //          [0, 0, 0, 0, 0]]\n\n    // 2X2 Tensor with all values set to 1\n    console.log(\"元张量↓ \");\n    tf.ones([2, 2]).print();\n    // output\n    //     [[1, 1],\n    //     [1, 1]]\n\n    console.log(\"variables和值分配↓ \");\n    const initialValues = tf.zeros([5]);\n    const biases = tf.variable(initialValues); // 初始化偏差（距离原点的截距或偏移）\n    biases.print(); // output: [0, 0, 0, 0, 0]\n\n    const updatedValues = tf.tensor1d([0, 1, 0, 1, 0]);\n    biases.assign(updatedValues); // update values of biases\n    biases.print(); // output: [0, 1, 0, 1, 0]\n\n    console.log(\"Operations操作：tf提供的运算等↓ \");\n    const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n    tf.square(x).print(); // or x.square()\n    // [1, 4, 1.9999999, 1]\n\n    const x2 = tf.tensor1d([1, 2, 4, -1]);\n    tf.sqrt(x2).print(); // or x2.sqrt()\n    // [1, 1.4142135, 2, NaN]\n\n    function 二元方程求解(input: number) {\n      // y = a * x ^ 2 + b * x + c\n      return tf.tidy(() => {\n        let a = tf.scalar(2);\n        let b = tf.scalar(4);\n        let c = tf.scalar(8);\n        let x = tf.scalar(input);\n\n        let ax2 = a.mul(x.square());\n        let bx = b.mul(x);\n        let y = ax2.add(bx).add(c);\n\n        return y;\n      });\n    }\n\n    function demo1() {\n      let result = 二元方程求解(2);\n      alert(result);\n    }\n\n    return {\n      a,\n      b,\n      demo1,\n    };\n  },\n});\n","import { render } from \"./demo1.vue?vue&type=template&id=abc04e14&ts=true\"\nimport script from \"./demo1.vue?vue&type=script&lang=ts\"\nexport * from \"./demo1.vue?vue&type=script&lang=ts\"\n\nimport \"./demo1.vue?vue&type=style&index=0&id=abc04e14&lang=css\"\n\nimport exportComponent from \"D:\\\\Workstation\\\\JsML\\\\jsml1\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}